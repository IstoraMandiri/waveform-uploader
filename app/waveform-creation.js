// Generated by CoffeeScript 1.7.1
var $, JSFtp, async, generateWaveform, getBufferFromDataUrl, getLoginDetails, request;

$ = require('jquery');

async = require('async');

request = require('request');

JSFtp = require('jsftp');

generateWaveform = function(file, options, callback) {
  var fileReader;
  if (options == null) {
    options = {};
  }
  fileReader = new FileReader;
  fileReader.onload = function() {
    var waveformSettings;
    waveformSettings = {
      waveform: {
        width: options.waveformWidth || 875,
        height: options.waveformHeight || 85,
        color: options.waveformColor || '#F5FF00'
      },
      bar: {
        align: options.barAlign || 'center',
        width: options.barWidth || 1,
        gap: options.barGapWidth || 0
      }
    };
    return WaveformGenerator(this.result, waveformSettings).then(function(svg) {
      var $svg, $svgContainer, ctx, img, mycanvas;
      $svgContainer = $('<div class="svg-container">').attr('data-color', waveformSettings.waveform.color);
      $svgContainer[0].innerHTML = svg;
      $svgContainer.appendTo('body');
      $svgContainer.hide();
      $svg = $('svg', $svgContainer);
      img = new Image();
      img.src = "data:image/svg+xml," + encodeURIComponent(svg);
      mycanvas = document.createElement('canvas');
      mycanvas.width = $svg.width();
      mycanvas.height = $svg.height();
      ctx = mycanvas.getContext("2d");
      ctx.drawImage(img, 0, 0);
      return callback(mycanvas.toDataURL("image/png"));
    });
  };
  return fileReader.readAsArrayBuffer(file);
};

getLoginDetails = function(type) {
  var data;
  data = {};
  $("form[name='" + type + "'").serializeArray().map(function(x) {
    return data[x.name] = x.value;
  });
  localStorage.setItem("loginDetails_" + type, JSON.stringify(data));
  return data;
};

getBufferFromDataUrl = function(url) {
  var base64Data;
  base64Data = url.replace(/^data:image\/png;base64,/, "");
  base64Data += base64Data.replace('+', ' ');
  return new Buffer(base64Data, 'base64');
};

$(document).ready(function() {
  var $status, $thisForm, key, setStatus, thisData, thisDataString, type, val, _i, _len, _ref;
  $status = $('.status-box');
  console.log("waveform creation loaded");
  _ref = ['mixes', 'waveforms'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    type = _ref[_i];
    thisDataString = localStorage["loginDetails_" + type];
    thisData = false;
    try {
      thisData = JSON.parse(thisDataString);
    } catch (_error) {}
    $thisForm = $("form[name='" + type + "'");
    for (key in thisData) {
      val = thisData[key];
      $("input[name='" + key + "']", $thisForm).val(val);
    }
  }
  setStatus = function(status) {
    return $status.html(status);
  };
  $('.config-box input').on('change', function() {
    return getLoginDetails($(this).closest('form').attr('name'));
  });
  return $('.waveform-upload').on('change', function() {
    var $backBar, $frontBar, $uploadBar, file, ftpMixes, ftpWaveforms, newFileName;
    file = this.files[0];
    newFileName = file.name.split('.');
    newFileName.pop();
    newFileName = newFileName.join('.');
    setStatus("Generating Waveforms...");
    $uploadBar = $(".upload-bar").addClass('ready');
    $backBar = $('.back-bar', $uploadBar).css("background-image", "none");
    $frontBar = $('.front-bar', $uploadBar).css("background-image", "none").css('width', "0%");
    ftpMixes = new JSFtp(getLoginDetails('mixes'));
    ftpWaveforms = new JSFtp(getLoginDetails('waveforms'));
    return async.series([
      function(done) {
        return generateWaveform(file, {
          waveformColor: "#444444"
        }, function(png) {
          $backBar.css("background-image", "url('" + png + "')");
          return ftpWaveforms.put(getBufferFromDataUrl(png), "" + newFileName + "_960_999999.png", done);
        });
      }, function(done) {
        return generateWaveform(file, {}, function(png) {
          $frontBar.css("background-image", "url('" + png + "')");
          return ftpWaveforms.put(getBufferFromDataUrl(png), "" + newFileName + "_960_F5FF00.png", done);
        });
      }
    ], function() {
      var completedDownload, outputFile, uploadInterval;
      setStatus("Uploading...");
      $frontBar.removeClass('complete');
      outputFile = "http://" + ftpMixes.host + "/" + file.name;
      completedDownload = false;
      (uploadInterval = function() {
        if (!completedDownload) {
          return request.head(outputFile, function(err, res) {
            var size;
            if (!completedDownload) {
              size = Math.round(((res.headers['content-length'] / file.size) || 0) * 100) + "%";
              setStatus("Uploading... " + size);
              $frontBar.css('width', size);
              return setTimeout(uploadInterval, 1000 * 3);
            }
          });
        }
      })();
      return ftpMixes.put(file.path, file.name, function(err, res) {
        completedDownload = true;
        $frontBar.addClass('complete').css('width', "100%");
        return setStatus("Completed upload of <b>" + outputFile + "</b>");
      });
    });
  });
});
